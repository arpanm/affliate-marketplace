package com.marketplace.affliate.video.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReviewAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReviewAllPropertiesEquals(Review expected, Review actual) {
        assertReviewAutoGeneratedPropertiesEquals(expected, actual);
        assertReviewAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReviewAllUpdatablePropertiesEquals(Review expected, Review actual) {
        assertReviewUpdatableFieldsEquals(expected, actual);
        assertReviewUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReviewAutoGeneratedPropertiesEquals(Review expected, Review actual) {
        assertThat(expected)
            .as("Verify Review auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReviewUpdatableFieldsEquals(Review expected, Review actual) {
        assertThat(expected)
            .as("Verify Review relevant properties")
            .satisfies(e -> assertThat(e.getIsLiked()).as("check isLiked").isEqualTo(actual.getIsLiked()))
            .satisfies(e -> assertThat(e.getIsSkipped()).as("check isSkipped").isEqualTo(actual.getIsSkipped()))
            .satisfies(e -> assertThat(e.getIsDisliked()).as("check isDisliked").isEqualTo(actual.getIsDisliked()))
            .satisfies(e -> assertThat(e.getIsWatched()).as("check isWatched").isEqualTo(actual.getIsWatched()))
            .satisfies(e -> assertThat(e.getIsFullyWatched()).as("check isFullyWatched").isEqualTo(actual.getIsFullyWatched()))
            .satisfies(e -> assertThat(e.getIsReported()).as("check isReported").isEqualTo(actual.getIsReported()))
            .satisfies(e -> assertThat(e.getRating()).as("check rating").isEqualTo(actual.getRating()))
            .satisfies(e -> assertThat(e.getComment()).as("check comment").isEqualTo(actual.getComment()))
            .satisfies(e -> assertThat(e.getReportReason()).as("check reportReason").isEqualTo(actual.getReportReason()))
            .satisfies(e -> assertThat(e.getIsBlocked()).as("check isBlocked").isEqualTo(actual.getIsBlocked()))
            .satisfies(e -> assertThat(e.getIsModerated()).as("check isModerated").isEqualTo(actual.getIsModerated()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReviewUpdatableRelationshipsEquals(Review expected, Review actual) {
        assertThat(expected)
            .as("Verify Review relationships")
            .satisfies(e -> assertThat(e.getReviewer()).as("check reviewer").isEqualTo(actual.getReviewer()))
            .satisfies(e -> assertThat(e.getPost()).as("check post").isEqualTo(actual.getPost()));
    }
}
