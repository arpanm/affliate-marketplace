package com.marketplace.affliate.video.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AiToolPaymentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAiToolPaymentAllPropertiesEquals(AiToolPayment expected, AiToolPayment actual) {
        assertAiToolPaymentAutoGeneratedPropertiesEquals(expected, actual);
        assertAiToolPaymentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAiToolPaymentAllUpdatablePropertiesEquals(AiToolPayment expected, AiToolPayment actual) {
        assertAiToolPaymentUpdatableFieldsEquals(expected, actual);
        assertAiToolPaymentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAiToolPaymentAutoGeneratedPropertiesEquals(AiToolPayment expected, AiToolPayment actual) {
        assertThat(expected)
            .as("Verify AiToolPayment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAiToolPaymentUpdatableFieldsEquals(AiToolPayment expected, AiToolPayment actual) {
        assertThat(expected)
            .as("Verify AiToolPayment relevant properties")
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getPaymentLinkUrl()).as("check paymentLinkUrl").isEqualTo(actual.getPaymentLinkUrl()))
            .satisfies(e -> assertThat(e.getPgType()).as("check pgType").isEqualTo(actual.getPgType()))
            .satisfies(e -> assertThat(e.getPgId()).as("check pgId").isEqualTo(actual.getPgId()))
            .satisfies(e -> assertThat(e.getPgStatus()).as("check pgStatus").isEqualTo(actual.getPgStatus()))
            .satisfies(e -> assertThat(e.getPgRequestJson()).as("check pgRequestJson").isEqualTo(actual.getPgRequestJson()))
            .satisfies(e -> assertThat(e.getPgResponseJson()).as("check pgResponseJson").isEqualTo(actual.getPgResponseJson()))
            .satisfies(e -> assertThat(e.getPgRequestTimeStamp()).as("check pgRequestTimeStamp").isEqualTo(actual.getPgRequestTimeStamp()))
            .satisfies(e ->
                assertThat(e.getPgResponseTimeStamp()).as("check pgResponseTimeStamp").isEqualTo(actual.getPgResponseTimeStamp())
            )
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAiToolPaymentUpdatableRelationshipsEquals(AiToolPayment expected, AiToolPayment actual) {
        assertThat(expected)
            .as("Verify AiToolPayment relationships")
            .satisfies(e -> assertThat(e.getSession()).as("check session").isEqualTo(actual.getSession()));
    }
}
