package com.marketplace.affliate.video.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SponsorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSponsorAllPropertiesEquals(Sponsor expected, Sponsor actual) {
        assertSponsorAutoGeneratedPropertiesEquals(expected, actual);
        assertSponsorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSponsorAllUpdatablePropertiesEquals(Sponsor expected, Sponsor actual) {
        assertSponsorUpdatableFieldsEquals(expected, actual);
        assertSponsorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSponsorAutoGeneratedPropertiesEquals(Sponsor expected, Sponsor actual) {
        assertThat(expected)
            .as("Verify Sponsor auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSponsorUpdatableFieldsEquals(Sponsor expected, Sponsor actual) {
        assertThat(expected)
            .as("Verify Sponsor relevant properties")
            .satisfies(e -> assertThat(e.getSponsorName()).as("check sponsorName").isEqualTo(actual.getSponsorName()))
            .satisfies(e -> assertThat(e.getSponsorDescription()).as("check sponsorDescription").isEqualTo(actual.getSponsorDescription()))
            .satisfies(e -> assertThat(e.getSponsorBanner1Url()).as("check sponsorBanner1Url").isEqualTo(actual.getSponsorBanner1Url()))
            .satisfies(e -> assertThat(e.getSponsorBanner2Url()).as("check sponsorBanner2Url").isEqualTo(actual.getSponsorBanner2Url()))
            .satisfies(e -> assertThat(e.getSponsorBanner3Url()).as("check sponsorBanner3Url").isEqualTo(actual.getSponsorBanner3Url()))
            .satisfies(e -> assertThat(e.getSponsorExternalUrl()).as("check sponsorExternalUrl").isEqualTo(actual.getSponsorExternalUrl()))
            .satisfies(e -> assertThat(e.getSponsorLogoUrl()).as("check sponsorLogoUrl").isEqualTo(actual.getSponsorLogoUrl()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSponsorUpdatableRelationshipsEquals(Sponsor expected, Sponsor actual) {
        // empty method
    }
}
