package com.marketplace.affliate.video.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CompetitionWinnerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompetitionWinnerAllPropertiesEquals(CompetitionWinner expected, CompetitionWinner actual) {
        assertCompetitionWinnerAutoGeneratedPropertiesEquals(expected, actual);
        assertCompetitionWinnerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompetitionWinnerAllUpdatablePropertiesEquals(CompetitionWinner expected, CompetitionWinner actual) {
        assertCompetitionWinnerUpdatableFieldsEquals(expected, actual);
        assertCompetitionWinnerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompetitionWinnerAutoGeneratedPropertiesEquals(CompetitionWinner expected, CompetitionWinner actual) {
        assertThat(expected)
            .as("Verify CompetitionWinner auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompetitionWinnerUpdatableFieldsEquals(CompetitionWinner expected, CompetitionWinner actual) {
        assertThat(expected)
            .as("Verify CompetitionWinner relevant properties")
            .satisfies(e -> assertThat(e.getPrizeTitle()).as("check prizeTitle").isEqualTo(actual.getPrizeTitle()))
            .satisfies(e -> assertThat(e.getCitation()).as("check citation").isEqualTo(actual.getCitation()))
            .satisfies(e -> assertThat(e.getCertificateUrl()).as("check certificateUrl").isEqualTo(actual.getCertificateUrl()))
            .satisfies(e -> assertThat(e.getSelectedBy()).as("check selectedBy").isEqualTo(actual.getSelectedBy()))
            .satisfies(e -> assertThat(e.getSelectionReason()).as("check selectionReason").isEqualTo(actual.getSelectionReason()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompetitionWinnerUpdatableRelationshipsEquals(CompetitionWinner expected, CompetitionWinner actual) {
        assertThat(expected)
            .as("Verify CompetitionWinner relationships")
            .satisfies(e -> assertThat(e.getWinningPost()).as("check winningPost").isEqualTo(actual.getWinningPost()))
            .satisfies(e -> assertThat(e.getPaymentToWinner()).as("check paymentToWinner").isEqualTo(actual.getPaymentToWinner()))
            .satisfies(e -> assertThat(e.getCompetitionPrize()).as("check competitionPrize").isEqualTo(actual.getCompetitionPrize()));
    }
}
