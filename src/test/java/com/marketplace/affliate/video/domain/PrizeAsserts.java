package com.marketplace.affliate.video.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PrizeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrizeAllPropertiesEquals(Prize expected, Prize actual) {
        assertPrizeAutoGeneratedPropertiesEquals(expected, actual);
        assertPrizeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrizeAllUpdatablePropertiesEquals(Prize expected, Prize actual) {
        assertPrizeUpdatableFieldsEquals(expected, actual);
        assertPrizeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrizeAutoGeneratedPropertiesEquals(Prize expected, Prize actual) {
        assertThat(expected)
            .as("Verify Prize auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrizeUpdatableFieldsEquals(Prize expected, Prize actual) {
        assertThat(expected)
            .as("Verify Prize relevant properties")
            .satisfies(e -> assertThat(e.getPrizeType()).as("check prizeType").isEqualTo(actual.getPrizeType()))
            .satisfies(e -> assertThat(e.getPrizeTag()).as("check prizeTag").isEqualTo(actual.getPrizeTag()))
            .satisfies(e -> assertThat(e.getPrizeDetails()).as("check prizeDetails").isEqualTo(actual.getPrizeDetails()))
            .satisfies(e -> assertThat(e.getPrizeValueType()).as("check prizeValueType").isEqualTo(actual.getPrizeValueType()))
            .satisfies(e -> assertThat(e.getPrizeValue()).as("check prizeValue").isEqualTo(actual.getPrizeValue()))
            .satisfies(e ->
                assertThat(e.getCountOfPossibleWinners()).as("check countOfPossibleWinners").isEqualTo(actual.getCountOfPossibleWinners())
            )
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrizeUpdatableRelationshipsEquals(Prize expected, Prize actual) {
        assertThat(expected)
            .as("Verify Prize relationships")
            .satisfies(e -> assertThat(e.getCompetition()).as("check competition").isEqualTo(actual.getCompetition()));
    }
}
