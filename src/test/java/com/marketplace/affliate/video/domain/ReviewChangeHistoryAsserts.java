package com.marketplace.affliate.video.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReviewChangeHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReviewChangeHistoryAllPropertiesEquals(ReviewChangeHistory expected, ReviewChangeHistory actual) {
        assertReviewChangeHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertReviewChangeHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReviewChangeHistoryAllUpdatablePropertiesEquals(ReviewChangeHistory expected, ReviewChangeHistory actual) {
        assertReviewChangeHistoryUpdatableFieldsEquals(expected, actual);
        assertReviewChangeHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReviewChangeHistoryAutoGeneratedPropertiesEquals(ReviewChangeHistory expected, ReviewChangeHistory actual) {
        assertThat(expected)
            .as("Verify ReviewChangeHistory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReviewChangeHistoryUpdatableFieldsEquals(ReviewChangeHistory expected, ReviewChangeHistory actual) {
        assertThat(expected)
            .as("Verify ReviewChangeHistory relevant properties")
            .satisfies(e -> assertThat(e.getChangeType()).as("check changeType").isEqualTo(actual.getChangeType()))
            .satisfies(e -> assertThat(e.getOldIsLiked()).as("check oldIsLiked").isEqualTo(actual.getOldIsLiked()))
            .satisfies(e -> assertThat(e.getOldIsSkipped()).as("check oldIsSkipped").isEqualTo(actual.getOldIsSkipped()))
            .satisfies(e -> assertThat(e.getOldIsDisliked()).as("check oldIsDisliked").isEqualTo(actual.getOldIsDisliked()))
            .satisfies(e -> assertThat(e.getOldIsWatched()).as("check oldIsWatched").isEqualTo(actual.getOldIsWatched()))
            .satisfies(e -> assertThat(e.getOldIsFullyWatched()).as("check oldIsFullyWatched").isEqualTo(actual.getOldIsFullyWatched()))
            .satisfies(e -> assertThat(e.getOldIsReported()).as("check oldIsReported").isEqualTo(actual.getOldIsReported()))
            .satisfies(e -> assertThat(e.getOldRating()).as("check oldRating").isEqualTo(actual.getOldRating()))
            .satisfies(e -> assertThat(e.getOldComment()).as("check oldComment").isEqualTo(actual.getOldComment()))
            .satisfies(e -> assertThat(e.getOldReportReason()).as("check oldReportReason").isEqualTo(actual.getOldReportReason()))
            .satisfies(e -> assertThat(e.getOldIsBlocked()).as("check oldIsBlocked").isEqualTo(actual.getOldIsBlocked()))
            .satisfies(e -> assertThat(e.getOldIsModerated()).as("check oldIsModerated").isEqualTo(actual.getOldIsModerated()))
            .satisfies(e -> assertThat(e.getOldIsActive()).as("check oldIsActive").isEqualTo(actual.getOldIsActive()))
            .satisfies(e -> assertThat(e.getOldCreatedBy()).as("check oldCreatedBy").isEqualTo(actual.getOldCreatedBy()))
            .satisfies(e -> assertThat(e.getOldCreatedOn()).as("check oldCreatedOn").isEqualTo(actual.getOldCreatedOn()))
            .satisfies(e -> assertThat(e.getOldUpdatedBy()).as("check oldUpdatedBy").isEqualTo(actual.getOldUpdatedBy()))
            .satisfies(e -> assertThat(e.getOldUpdatedOn()).as("check oldUpdatedOn").isEqualTo(actual.getOldUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReviewChangeHistoryUpdatableRelationshipsEquals(ReviewChangeHistory expected, ReviewChangeHistory actual) {
        assertThat(expected)
            .as("Verify ReviewChangeHistory relationships")
            .satisfies(e -> assertThat(e.getReview()).as("check review").isEqualTo(actual.getReview()));
    }
}
