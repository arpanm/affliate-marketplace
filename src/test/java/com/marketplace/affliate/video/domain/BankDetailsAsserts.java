package com.marketplace.affliate.video.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BankDetailsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankDetailsAllPropertiesEquals(BankDetails expected, BankDetails actual) {
        assertBankDetailsAutoGeneratedPropertiesEquals(expected, actual);
        assertBankDetailsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankDetailsAllUpdatablePropertiesEquals(BankDetails expected, BankDetails actual) {
        assertBankDetailsUpdatableFieldsEquals(expected, actual);
        assertBankDetailsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankDetailsAutoGeneratedPropertiesEquals(BankDetails expected, BankDetails actual) {
        assertThat(expected)
            .as("Verify BankDetails auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankDetailsUpdatableFieldsEquals(BankDetails expected, BankDetails actual) {
        assertThat(expected)
            .as("Verify BankDetails relevant properties")
            .satisfies(e -> assertThat(e.getAccountName()).as("check accountName").isEqualTo(actual.getAccountName()))
            .satisfies(e -> assertThat(e.getAccountNo()).as("check accountNo").isEqualTo(actual.getAccountNo()))
            .satisfies(e -> assertThat(e.getBankName()).as("check bankName").isEqualTo(actual.getBankName()))
            .satisfies(e -> assertThat(e.getIfsc()).as("check ifsc").isEqualTo(actual.getIfsc()))
            .satisfies(e -> assertThat(e.getProofUrl()).as("check proofUrl").isEqualTo(actual.getProofUrl()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankDetailsUpdatableRelationshipsEquals(BankDetails expected, BankDetails actual) {
        // empty method
    }
}
