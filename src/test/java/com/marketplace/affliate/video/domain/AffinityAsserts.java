package com.marketplace.affliate.video.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AffinityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAffinityAllPropertiesEquals(Affinity expected, Affinity actual) {
        assertAffinityAutoGeneratedPropertiesEquals(expected, actual);
        assertAffinityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAffinityAllUpdatablePropertiesEquals(Affinity expected, Affinity actual) {
        assertAffinityUpdatableFieldsEquals(expected, actual);
        assertAffinityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAffinityAutoGeneratedPropertiesEquals(Affinity expected, Affinity actual) {
        assertThat(expected)
            .as("Verify Affinity auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAffinityUpdatableFieldsEquals(Affinity expected, Affinity actual) {
        assertThat(expected)
            .as("Verify Affinity relevant properties")
            .satisfies(e -> assertThat(e.getSegment()).as("check segment").isEqualTo(actual.getSegment()))
            .satisfies(e -> assertThat(e.getScore()).as("check score").isEqualTo(actual.getScore()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAffinityUpdatableRelationshipsEquals(Affinity expected, Affinity actual) {
        assertThat(expected)
            .as("Verify Affinity relationships")
            .satisfies(e -> assertThat(e.getPosts()).as("check posts").isEqualTo(actual.getPosts()))
            .satisfies(e -> assertThat(e.getUsers()).as("check users").isEqualTo(actual.getUsers()));
    }
}
