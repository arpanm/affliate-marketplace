package com.marketplace.affliate.video.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VideoPostChangeHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVideoPostChangeHistoryAllPropertiesEquals(VideoPostChangeHistory expected, VideoPostChangeHistory actual) {
        assertVideoPostChangeHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertVideoPostChangeHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVideoPostChangeHistoryAllUpdatablePropertiesEquals(
        VideoPostChangeHistory expected,
        VideoPostChangeHistory actual
    ) {
        assertVideoPostChangeHistoryUpdatableFieldsEquals(expected, actual);
        assertVideoPostChangeHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVideoPostChangeHistoryAutoGeneratedPropertiesEquals(
        VideoPostChangeHistory expected,
        VideoPostChangeHistory actual
    ) {
        assertThat(expected)
            .as("Verify VideoPostChangeHistory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVideoPostChangeHistoryUpdatableFieldsEquals(VideoPostChangeHistory expected, VideoPostChangeHistory actual) {
        assertThat(expected)
            .as("Verify VideoPostChangeHistory relevant properties")
            .satisfies(e -> assertThat(e.getChangeType()).as("check changeType").isEqualTo(actual.getChangeType()))
            .satisfies(e -> assertThat(e.getOldtitle()).as("check oldtitle").isEqualTo(actual.getOldtitle()))
            .satisfies(e -> assertThat(e.getOldDescription()).as("check oldDescription").isEqualTo(actual.getOldDescription()))
            .satisfies(e -> assertThat(e.getOldUrl()).as("check oldUrl").isEqualTo(actual.getOldUrl()))
            .satisfies(e -> assertThat(e.getOldUrlType()).as("check oldUrlType").isEqualTo(actual.getOldUrlType()))
            .satisfies(e -> assertThat(e.getOldIsAIGenerated()).as("check oldIsAIGenerated").isEqualTo(actual.getOldIsAIGenerated()))
            .satisfies(e -> assertThat(e.getOldIsPremium()).as("check oldIsPremium").isEqualTo(actual.getOldIsPremium()))
            .satisfies(e -> assertThat(e.getOldIsBlocked()).as("check oldIsBlocked").isEqualTo(actual.getOldIsBlocked()))
            .satisfies(e -> assertThat(e.getOldIsModerated()).as("check oldIsModerated").isEqualTo(actual.getOldIsModerated()))
            .satisfies(e -> assertThat(e.getOldIsActive()).as("check oldIsActive").isEqualTo(actual.getOldIsActive()))
            .satisfies(e -> assertThat(e.getOldCreatedBy()).as("check oldCreatedBy").isEqualTo(actual.getOldCreatedBy()))
            .satisfies(e -> assertThat(e.getOldCreatedOn()).as("check oldCreatedOn").isEqualTo(actual.getOldCreatedOn()))
            .satisfies(e -> assertThat(e.getOldUpdatedBy()).as("check oldUpdatedBy").isEqualTo(actual.getOldUpdatedBy()))
            .satisfies(e -> assertThat(e.getOldUpdatedOn()).as("check oldUpdatedOn").isEqualTo(actual.getOldUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVideoPostChangeHistoryUpdatableRelationshipsEquals(
        VideoPostChangeHistory expected,
        VideoPostChangeHistory actual
    ) {
        assertThat(expected)
            .as("Verify VideoPostChangeHistory relationships")
            .satisfies(e -> assertThat(e.getPost()).as("check post").isEqualTo(actual.getPost()));
    }
}
