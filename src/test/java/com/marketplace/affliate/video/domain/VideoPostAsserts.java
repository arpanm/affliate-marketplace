package com.marketplace.affliate.video.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VideoPostAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVideoPostAllPropertiesEquals(VideoPost expected, VideoPost actual) {
        assertVideoPostAutoGeneratedPropertiesEquals(expected, actual);
        assertVideoPostAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVideoPostAllUpdatablePropertiesEquals(VideoPost expected, VideoPost actual) {
        assertVideoPostUpdatableFieldsEquals(expected, actual);
        assertVideoPostUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVideoPostAutoGeneratedPropertiesEquals(VideoPost expected, VideoPost actual) {
        assertThat(expected)
            .as("Verify VideoPost auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVideoPostUpdatableFieldsEquals(VideoPost expected, VideoPost actual) {
        assertThat(expected)
            .as("Verify VideoPost relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getUrl()).as("check url").isEqualTo(actual.getUrl()))
            .satisfies(e -> assertThat(e.getUrlType()).as("check urlType").isEqualTo(actual.getUrlType()))
            .satisfies(e -> assertThat(e.getIsAIGenerated()).as("check isAIGenerated").isEqualTo(actual.getIsAIGenerated()))
            .satisfies(e -> assertThat(e.getIsPremium()).as("check isPremium").isEqualTo(actual.getIsPremium()))
            .satisfies(e -> assertThat(e.getIsBlocked()).as("check isBlocked").isEqualTo(actual.getIsBlocked()))
            .satisfies(e -> assertThat(e.getIsModerated()).as("check isModerated").isEqualTo(actual.getIsModerated()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVideoPostUpdatableRelationshipsEquals(VideoPost expected, VideoPost actual) {
        assertThat(expected)
            .as("Verify VideoPost relationships")
            .satisfies(e -> assertThat(e.getCompetition()).as("check competition").isEqualTo(actual.getCompetition()))
            .satisfies(e -> assertThat(e.getTags()).as("check tags").isEqualTo(actual.getTags()))
            .satisfies(e -> assertThat(e.getAffinityVectors()).as("check affinityVectors").isEqualTo(actual.getAffinityVectors()))
            .satisfies(e -> assertThat(e.getCreator()).as("check creator").isEqualTo(actual.getCreator()));
    }
}
