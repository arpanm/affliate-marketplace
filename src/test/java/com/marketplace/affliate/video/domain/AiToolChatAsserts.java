package com.marketplace.affliate.video.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AiToolChatAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAiToolChatAllPropertiesEquals(AiToolChat expected, AiToolChat actual) {
        assertAiToolChatAutoGeneratedPropertiesEquals(expected, actual);
        assertAiToolChatAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAiToolChatAllUpdatablePropertiesEquals(AiToolChat expected, AiToolChat actual) {
        assertAiToolChatUpdatableFieldsEquals(expected, actual);
        assertAiToolChatUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAiToolChatAutoGeneratedPropertiesEquals(AiToolChat expected, AiToolChat actual) {
        assertThat(expected)
            .as("Verify AiToolChat auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAiToolChatUpdatableFieldsEquals(AiToolChat expected, AiToolChat actual) {
        assertThat(expected)
            .as("Verify AiToolChat relevant properties")
            .satisfies(e -> assertThat(e.getMessage()).as("check message").isEqualTo(actual.getMessage()))
            .satisfies(e -> assertThat(e.getVideoUrl()).as("check videoUrl").isEqualTo(actual.getVideoUrl()))
            .satisfies(e -> assertThat(e.getPaymentUrl()).as("check paymentUrl").isEqualTo(actual.getPaymentUrl()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getIsFinalVidel()).as("check isFinalVidel").isEqualTo(actual.getIsFinalVidel()))
            .satisfies(e -> assertThat(e.getIsDownloaded()).as("check isDownloaded").isEqualTo(actual.getIsDownloaded()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAiToolChatUpdatableRelationshipsEquals(AiToolChat expected, AiToolChat actual) {
        assertThat(expected)
            .as("Verify AiToolChat relationships")
            .satisfies(e -> assertThat(e.getSession()).as("check session").isEqualTo(actual.getSession()));
    }
}
