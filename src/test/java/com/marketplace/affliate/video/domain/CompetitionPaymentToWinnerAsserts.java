package com.marketplace.affliate.video.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CompetitionPaymentToWinnerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompetitionPaymentToWinnerAllPropertiesEquals(
        CompetitionPaymentToWinner expected,
        CompetitionPaymentToWinner actual
    ) {
        assertCompetitionPaymentToWinnerAutoGeneratedPropertiesEquals(expected, actual);
        assertCompetitionPaymentToWinnerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompetitionPaymentToWinnerAllUpdatablePropertiesEquals(
        CompetitionPaymentToWinner expected,
        CompetitionPaymentToWinner actual
    ) {
        assertCompetitionPaymentToWinnerUpdatableFieldsEquals(expected, actual);
        assertCompetitionPaymentToWinnerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompetitionPaymentToWinnerAutoGeneratedPropertiesEquals(
        CompetitionPaymentToWinner expected,
        CompetitionPaymentToWinner actual
    ) {
        assertThat(expected)
            .as("Verify CompetitionPaymentToWinner auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompetitionPaymentToWinnerUpdatableFieldsEquals(
        CompetitionPaymentToWinner expected,
        CompetitionPaymentToWinner actual
    ) {
        assertThat(expected)
            .as("Verify CompetitionPaymentToWinner relevant properties")
            .satisfies(e -> assertThat(e.getPrizeTitle()).as("check prizeTitle").isEqualTo(actual.getPrizeTitle()))
            .satisfies(e -> assertThat(e.getPrizeAmount()).as("check prizeAmount").isEqualTo(actual.getPrizeAmount()))
            .satisfies(e -> assertThat(e.getTdsAmount()).as("check tdsAmount").isEqualTo(actual.getTdsAmount()))
            .satisfies(e -> assertThat(e.getTdsCertificateUrl()).as("check tdsCertificateUrl").isEqualTo(actual.getTdsCertificateUrl()))
            .satisfies(e ->
                assertThat(e.getOtherDeductionAmount()).as("check otherDeductionAmount").isEqualTo(actual.getOtherDeductionAmount())
            )
            .satisfies(e -> assertThat(e.getDeductionReason()).as("check deductionReason").isEqualTo(actual.getDeductionReason()))
            .satisfies(e -> assertThat(e.getDeductionJsonData()).as("check deductionJsonData").isEqualTo(actual.getDeductionJsonData()))
            .satisfies(e ->
                assertThat(e.getDeductionCertificateUrl())
                    .as("check deductionCertificateUrl")
                    .isEqualTo(actual.getDeductionCertificateUrl())
            )
            .satisfies(e -> assertThat(e.getPaidAmount()).as("check paidAmount").isEqualTo(actual.getPaidAmount()))
            .satisfies(e -> assertThat(e.getTransactionId()).as("check transactionId").isEqualTo(actual.getTransactionId()))
            .satisfies(e ->
                assertThat(e.getTransactionScreenshotUrl())
                    .as("check transactionScreenshotUrl")
                    .isEqualTo(actual.getTransactionScreenshotUrl())
            )
            .satisfies(e -> assertThat(e.getTransactionDate()).as("check transactionDate").isEqualTo(actual.getTransactionDate()))
            .satisfies(e -> assertThat(e.getTransactionStatus()).as("check transactionStatus").isEqualTo(actual.getTransactionStatus()))
            .satisfies(e -> assertThat(e.getPaidBy()).as("check paidBy").isEqualTo(actual.getPaidBy()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedOn()).as("check createdOn").isEqualTo(actual.getCreatedOn()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedOn()).as("check updatedOn").isEqualTo(actual.getUpdatedOn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompetitionPaymentToWinnerUpdatableRelationshipsEquals(
        CompetitionPaymentToWinner expected,
        CompetitionPaymentToWinner actual
    ) {
        // empty method
    }
}
